package org.jembi.bsis.backingform.validator;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.jembi.bsis.backingform.DonationBatchBackingForm;
import org.jembi.bsis.model.donationbatch.DonationBatch;
import org.jembi.bsis.model.location.Location;
import org.jembi.bsis.repository.DonationBatchRepository;
import org.jembi.bsis.repository.LocationRepository;
import org.jembi.bsis.repository.SequenceNumberRepository;
import org.jembi.bsis.service.DateGeneratorService;
import org.jembi.bsis.utils.CustomDateFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;

@Component
public class DonationBatchBackingFormValidator extends BaseValidator<DonationBatchBackingForm> {

  @Autowired
  private DonationBatchRepository donationBatchRepository;

  @Autowired
  private LocationRepository locationRepository;

  @Autowired
  private SequenceNumberRepository sequenceNumberRepository;

  @Autowired
  private DateGeneratorService dateGeneratorService;

  @Override
  public void validateForm(DonationBatchBackingForm form, Errors errors) {
    updateAutoGeneratedFields(form);

    if (form.getId() != null && isDuplicateDonationBatchNumber(form.getDonationBatch()))
      errors.rejectValue("donationBatch.batchNumber", "batchNumber.nonunique",
          "There exists a donation batch with the same batch number.");

    Location venue = form.getDonationBatch().getVenue();
    if (venue == null || venue.getId() == null) {
      errors.rejectValue("donationBatch.venue", "venue.empty",
          "Venue is required.");
    } else {
      venue = locationRepository.getLocation(venue.getId());
      ArrayList<UUID> venueIds = new ArrayList<>();
      venueIds.add(venue.getId());
      if (venue.getIsVenue() == false) {
        errors.rejectValue("donationBatch.venue", "venue.invalid",
            "Location is not a Venue.");
      } else if (form.getId() == null && findOpenDonationBatches(venueIds).size() > 0) {
        errors.rejectValue("donationBatch.venue", "venue.openBatch",
            "There is already an open donation batch for that venue.");
      }
    }

    Date donationBatchDate = form.getDonationBatchDate();
    if (donationBatchDate == null) {
      errors.rejectValue("donationBatch.donationBatchDate", "donationBatchDate.empty",
          "donationBatchDate is required.");
    } else {
      if (dateGeneratorService.generateDate(donationBatchDate).after(new Date())) {
        errors.rejectValue("donationBatch.donationBatchDate", "donationBatchDate.invalid",
            "The donationBatchDate provided: [" + CustomDateFormatter.getDateString(donationBatchDate)
                + "] must be a date in the past.");
      }
    }

    commonFieldChecks(form, errors);
  }

  @Override
  public String getFormName() {
    return "donationBatch";
  }

  private void updateAutoGeneratedFields(DonationBatchBackingForm form) {
    if (StringUtils.isBlank(form.getBatchNumber()) && isFieldAutoGenerated("batchNumber")) {
      form.setBatchNumber(sequenceNumberRepository.getNextBatchNumber());
    }
  }

  private boolean isDuplicateDonationBatchNumber(DonationBatch donationBatch) {
    String batchNumber = donationBatch.getBatchNumber();
    if (StringUtils.isBlank(batchNumber)) {
      return false;
    }

    DonationBatch existingDonationBatch = donationBatchRepository.findDonationBatchByBatchNumberIncludeDeleted(batchNumber);
    if (existingDonationBatch != null && !existingDonationBatch.getId().equals(donationBatch.getId())) {
      return true;
    }

    return false;
  }

  private List<DonationBatch> findOpenDonationBatches(List<UUID> venueIds) {
    return donationBatchRepository.findDonationBatches(false, venueIds, null, null);
  }

}
